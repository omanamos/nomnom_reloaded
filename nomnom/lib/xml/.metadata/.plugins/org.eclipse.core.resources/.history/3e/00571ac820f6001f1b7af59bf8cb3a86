import java.util.*;
import java.util.regex.*;

import org.apache.commons.lang.StringEscapeUtils;

public class Ingredient {
	
	private static final String UNIT = "(pound|can|cup|ounce|quart|pint|quart|gallon|gram|teaspoon|tablespoon|liter|milliliter|kilogram|scoop|" +
											"kg|tbl|teasp|tspn|ts|c|cm|lb|cp|oz|qt|gal|gm|tsp|tbsp|tbs|lt|g|lit|ml)(\\.|s|s\\.)*\\s+";
	private static final String GUESS = "(dash|splash|tad|drop|pinch|shot|bottle|clove|tin|slice|bit)(s)*";
	private static final String KIND = "(even|level|heaping|sifted|rounded|packed|minced|sliced|chopped|canned|sheet)";
	private static final String NUM = "(\\d+\\S*|\\d+/\\d+|\\d+\\s*\\d+/\\d+|\\d+-\\d+|\\d*\\.\\d+|one|two|three|four|five|six|seven|eight|nine|ten|eleven|twelve|\\d\\s*dozen)";
	private static final String SIZE = "(small|medium|large|huge|tiny|few|lrg)";
	private static final String STOP = "(a|an|the|some|app\\.|approximately|approx\\.)";
	private static final String DELIM = "[\\s\\?]";
	
	private static final String regex = ("(STOP*(NUM\\s*KIND\\s*SIZE\\s*GUESS|" +
										"NUM\\s*KIND\\s*SIZE\\s*UNIT|" +
										"NUM\\s*KIND\\s*GUESS|" +
										"NUM\\s*KIND\\s*UNIT|" +
										"NUM\\s*UNIT\\s*KIND|" +
										"NUM\\s*SIZE\\s*UNIT|" +
										"NUM\\s*SIZE\\s*GUESS|" + 
										"NUM\\s*GUESS|" +
										"NUM\\s*UNIT|" + 
										"NUM)?STOP*(\\([^\\)]*\\))?STOP*)" +
										"(.*\\[\\[(.*)\\]\\].*)").replace("UNIT", UNIT).replace("KIND", KIND).replace("NUM", NUM).replace("SIZE", SIZE).replace("STOP", STOP).replace("GUESS", GUESS).replace("\\s", DELIM);
	private static final Pattern p = Pattern.compile(Ingredient.regex);
	
	
	private String item;
	private String amount;
	
	public Ingredient(String item, String amount) {
		this.item = item;
		this.amount = amount;
	}
	public Ingredient(String item) {
		this(item, "");
	}
	public Ingredient() {
		this("", "");
	}
	public String toString() {
		return "\t\t\t<ingredient>\n" +
					"\t\t\t\t<item>" + StringEscapeUtils.escapeXml(StringEscapeUtils.unescapeXml(item)) + "</item>\n" +
					"\t\t\t\t<amount>" + StringEscapeUtils.escapeXml(StringEscapeUtils.unescapeXml(amount)) + "</amount>\n" +
				"\t\t\t</ingredient>\n";
	}
	private static String stripBrackets(String item) {
		return item.replace("[[", "").replace("]]", "");
	}
	private static String cleanFragment(String s) {
		if (s.contains(",")) {
			s = s.substring(0, s.indexOf(","));
		}
		return stripBrackets(s).trim().replaceAll("\\s{1,}", " ");
	}
	
	public static Ingredient parseIngredient(String s) {
		Matcher m = p.matcher(s.toLowerCase());
		if (m.matches()) {
			String amount = m.group(1);
			String item = m.group(m.groupCount() - 1);
			if (amount != null && item != null) {
				return new Ingredient(cleanFragment(item), cleanFragment(amount));
			}
		}
		return null;
	}
	
	public static Ingredient parseIngredient2(String s) {
		if (!s.trim().isEmpty()) {
			s = stripBrackets(s);
			Scanner tokens = new Scanner(s);
			String amount = tokens.next();
			if (tokens.hasNext()) {
				amount += " " + tokens.next();
			}
			String item = "";
			while (tokens.hasNext()) {
				item += " " + tokens.next();
			}
			item = cleanFragment(item);
			amount = cleanFragment(amount);
			if (item.isEmpty()) {
				return new Ingredient(amount.trim());
			} else {
				return new Ingredient(item.trim(), amount.trim());
			}
		} else {
			return null;
		}
		
	}
}