import java.util.*;
import java.util.regex.*;
import org.apache.commons.lang.StringEscapeUtils;

public class Ingredient {
	
	private static final String UNIT2 = "(pound|peice|jar|sheets|can|cup|ounce|quart|pint|quart|gallon|gram|teaspoon|tablespoon|liter|milliliter|kilogram|scoop|packet|" +
											"kg|tbl|teasp|tspn|tb|c|cm|lb|cp|oz|qt|gal|gm|tsp|tbsp|ts|tbs|lt|g|lit|ml|pkt|x)(\\.|s|s\\.|)*";
	private static final String UNIT = "UNIT2\\s+".replace("UNIT2", UNIT2);
	private static final String GUESS = "(about|almost|dash|splash|tad|drop|pinch|shot|bottle|clove|tin|slice|bit|bunch)(s|es|)*";
	private static final String KIND = "(even|level|heaping|grated|sifted|ground|rounded|packed|minced|sliced|chopped|canned|sheet)";
	private static final String NUM_PART = "(\\d+/\\d+|\\d+\\s*\\d+/\\d+|\\d+\\s*-\\s*\\d+|\\d*\\.\\d+|\\d+\\s*|one|two|three|four|five|six|seven|eight|nine|ten|eleven|twelve|\\d*\\s*dozen)";
	private static final String NUM = "(NUM_PART\\s*(to|-|or)\\s*NUM_PART|NUM_PART)".replace("NUM_PART", NUM_PART);
	private static final String SIZE = "(small|medium|large|huge|tiny|few|lrg|lg|quarter|half|third|eighth)";
	private static final String STOP = "(of |a |an |the |some |app\\. |approximately |approx\\. |approx |aprox\\. )";
	private static final String DELIM = "[\\s\\?]";
	private static final String SPECIFIC = "KIND*\\s*(salt and pepper|salt|pepper|ginger|oil|vegetable oil|lemon juice|lemon|margarine|butter|sugar|olive oil|water)+.*".replace("KIND", KIND);
	
	private static final String regex = ("(STOP*\\s*((NUM\\s*KIND\\s*SIZE\\s*GUESS|" +
										"NUM\\s*KIND\\s*SIZE\\s*UNIT|" +
										"NUM\\s*KIND\\s*GUESS|" +
										"NUM\\s*KIND\\s*UNIT|" +
										"NUM\\s*UNIT\\s*KIND|" +
										"NUM\\s*SIZE\\s*UNIT|" +
										"NUM\\s*SIZE\\s*GUESS|" + 
										"NUM\\s*GUESS|" +
										"NUM\\s*UNIT|" +
										"NUM\\s*SIZE|" +
										"GUESS\\s*NUM\\s*UNIT|" +
										"GUESS\\s*NUM|" +
										"SIZE\\s*UNIT|" +
										"SIZE|" +
										"KIND|" +
										"UNIT|" +
										"NUM|" +
										"GUESS)(\\((NUM\\s*UNIT2)\\))*)?"+
										"\\s?STOP*\\s?(.*))").replace("UNIT2", UNIT2).replace("UNIT", UNIT).replace("KIND", KIND).replace("NUM", NUM).replace("SIZE", SIZE).replace("STOP", STOP).replace("GUESS", GUESS).replace("SPECIFIC", SPECIFIC).replace("\\s", DELIM);
	private static final Pattern p = Pattern.compile(Ingredient.regex);
	private static final Pattern p2 = Pattern.compile(SPECIFIC);
	
	
	private String item;
	private String amount;
	
	public Ingredient(String item, String amount) {
		this.item = clean(item);
		if (amount != null) {
			this.amount = clean(amount);
		}
	}
	public Ingredient(String item) {
		this(item, "");
	}
	public Ingredient() {
		this("", "");
	}
	private static String clean(String s) {
		if (s.contains(",")) {
			s = s.substring(0, s.indexOf(","));
		}
		String result = "";
		for (char c : s.toCharArray()) {
			if (c < 128) {
				result += c;
			} //else {
				//return null;
			//}
		}
		return result.replace("[[", "").replace("]]", "").replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;").replaceAll("\\s{1,}", " ").replace("\n", "").replace("\t", "").trim();
	}
	
	public static String preclean(String s) {
		return s.toLowerCase().replace("&nbsp;", " ").replace("<br>", "").replace("[[", "").replace("]]", "");
	}
	public String toString() {
		return "\t\t\t<ingredient>\n" +
					"\t\t\t\t<item>" + StringEscapeUtils.escapeXml(StringEscapeUtils.unescapeXml(item)) + "</item>\n" +
					"\t\t\t\t<amount>" + StringEscapeUtils.escapeXml(StringEscapeUtils.unescapeXml(amount)) + "</amount>\n" +
				"\t\t\t</ingredient>\n";
	}
	
	public static Ingredient parseIngredient(String s) {
		String s2 = preclean(s);
		Matcher m = p.matcher(s2);
		Matcher m2 = p2.matcher(s2);
		//Parse amount and item
		//System.out.println(p.toString());
		if (m.matches()) {
			String amount = m.group(3);
			String item = m.group(m.groupCount());
			if (amount != null && item != null) {
				String cleanItem = clean(item);
				String cleanAmount = clean(amount);
				if (cleanItem != null && cleanAmount != null && !cleanItem.isEmpty() && !cleanAmount.isEmpty()) {
					//System.out.println("MATCHED:" + s2 + "\n\t" + cleanAmount + "<>" + cleanItem);
					//for (int i = 0; i <= m.groupCount(); i++) {
					//	System.out.println(m.group(i));
					//}
					return new Ingredient(cleanItem, cleanAmount);
				}
			}
		}
		//Parse just the item if there is no amount
		if (m2.matches()) {
			String item = m2.group(m2.groupCount());
			if (item != null) {
				String cleanItem = clean(item);
				//System.out.println("MATCHED:" + s2 + "\n\t" + cleanItem);
				//for (int i = 0; i <= m2.groupCount(); i++) {
				//	System.out.println(m2.group(i));
				//}
				return new Ingredient(cleanItem, null);
			}
		}
		//System.out.println("NON_MATCHED:"+ s2);
		return null;
	}
	//Currently Not being used
	public static Ingredient parseIngredient2(String s) {
		if (!s.trim().isEmpty()) {
			s = s.replace("[[", "").replace("]]", "");
			Scanner tokens = new Scanner(s);
			String amount = tokens.next();
			if (tokens.hasNext()) {
				amount += " " + tokens.next();
			}
			String item = "";
			while (tokens.hasNext()) {
				item += " " + tokens.next();
			}
			item = clean(item);
			amount = clean(amount);
			if (item.isEmpty()) {
				return new Ingredient(amount.trim());
			} else {
				return new Ingredient(item.trim(), amount.trim());
			}
		} else {
			return null;
		}
		
	}
}